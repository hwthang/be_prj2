
import userService from "../service/user.service.js";
import ResponseBuilder from "../utils/response.helper.js";

class UserController {
  // ðŸ§© Táº¡o tÃ i khoáº£n
  createUser = async (req, res) => {
    try {
      const input = req.body;
      const result = await userService.createUser(input);

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("Táº¡o tÃ i khoáº£n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi táº¡o tÃ i khoáº£n", null, 500).send(res);
    }
  };

  // ðŸ§© Láº¥y danh sÃ¡ch tÃ i khoáº£n
  getUsers = async (req, res) => {
    try {
      const result = await userService.getUsers();

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("Láº¥y danh sÃ¡ch tÃ i khoáº£n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi láº¥y danh sÃ¡ch tÃ i khoáº£n", null, 500).send(res);
    }
  };

  // ðŸ§© Láº¥y thÃ´ng tin tÃ i khoáº£n
  getUser = async (req, res) => {
    try {
      const id = req.params.id;
      const result = await userService.getUser(id);

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("Láº¥y thÃ´ng tin tÃ i khoáº£n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi láº¥y thÃ´ng tin tÃ i khoáº£n", null, 500).send(res);
    }
  };

  // ðŸ§© Cáº­p nháº­t tÃ i khoáº£n
  updateUser = async (req, res) => {
    try {
      const id = req.params.id;
      const input = req.body;
      const result = await userService.updateUser(id, input);

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("Cáº­p nháº­t tÃ i khoáº£n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi cáº­p nháº­t tÃ i khoáº£n", null, 500).send(res);
    }
  };

  // ðŸ§© KÃ­ch hoáº¡t tÃ i khoáº£n
  activeUser = async (req, res) => {
    try {
      const id = req.params.id;
      const result = await userService.activeUser(id);

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("KÃ­ch hoáº¡t tÃ i khoáº£n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi kÃ­ch hoáº¡t tÃ i khoáº£n", null, 500).send(res);
    }
  };

  // ðŸ§© KhÃ³a tÃ i khoáº£n
  lockUser = async (req, res) => {
    try {
      const id = req.params.id;
      const result = await userService.lockUser(id);

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("KhÃ³a tÃ i khoáº£n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi khÃ³a tÃ i khoáº£n", null, 500).send(res);
    }
  };

  updateAvatar = async(req, res)=>{
     try {
      const id = req.params.id;
      const avatar = req.file
      console.log(req.file)
      console.log(avatar)
      const result = await userService.updateAvatar(id, avatar);

      if (typeof result === "string") {
        return ResponseBuilder.error(result).send(res);
      }

      return ResponseBuilder.success("Cáº­p nháº­t áº£nh Ä‘áº¡i diá»‡n thÃ nh cÃ´ng", result).send(res);
    } catch (error) {
      console.log(error);
      ResponseBuilder.error("Lá»—i khi cáº­p nháº­t áº£nh Ä‘áº¡i diá»‡n", null, 500).send(res);
    }
  }
}


export default new UserController();
